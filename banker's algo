#include<stdio.h>
int max[100][100];
int alloc[100][100];
int need[100][100];
int avail[100];
int work[100];
int finish[100];
int request[100];
int n,r;

void input()
{
	int i,j;
  	printf("Enter the number of processes :: ");
	scanf("%d",&n);
  	printf("Enter the number of resources :: ");
  	scanf("%d",&r);
  	printf("Enter the allocation matrix :: ");
  	for(i=0;i<n;i++)
    		for(j=0;j<r;j++)
      			scanf("%d",&alloc[i][j]);
  	printf("Enter the max matrix :: ");
  	for(i=0;i<n;i++)
    		for(j=0;j<r;j++)
      			scanf("%d",&max[i][j]);
  	printf("Enter the available matrix :: ");
  	for(i=0;i<r;i++)
  		scanf("%d",&avail[i]);   
  	
  	for(i=0;i<n;i++)
    		for(j=0;j<r;j++)
      			need[i][j] = max[i][j] - alloc[i][j];
}

void show()
{
  	int i,j;
  	printf("Allocation Matrix\n");
  	for(i=0;i<n;i++)
  	{
   		 printf("\n");
    		for(j=0;j<r;j++)
    		{
       			printf("\t");
      			printf("%d",alloc[i][j]);
    		}
  	}
  	printf("\nMax Matrix\n");
  	for(i=0;i<n;i++)
  	{
    		printf("\n");
    		for(j=0;j<r;j++)
    		{
       			printf("\t");
      			printf("%d",max[i][j]);
    		}
  	}
  	printf("\nAvailable Matrix\n");
  	for(i=0;i<r;i++)
    		printf("%d\t",avail[i]);
  	printf("\nNeed Matrix\n");
  	for(i=0;i<n;i++)
  	{
    		printf("\n");
    		for(j=0;j<r;j++)
    		{
       			printf("\t");
      			printf("%d",need[i][j]);
    		}
  	}
}

int safety()
{
	int i,j, k, c1 = 0, flag, count = 0;
	for(i=0;i<n;i++)
	{	
		finish[i] = 0;
	}
	for(i=0;i<r;i++)
  	{    
            work[i] = avail[i];
  	}
	
	printf("\n");
	while(count < n)
	{
		flag = 0;
		for(i = 0; i < n; i++)
		{
			int c=0;
			for(j = 0; j < r; j++)
			{	
				if((finish[i] == 0) && ( need[i][j] <= work[j]))
				{
					c++;
					if(c==r)
					{
						for(k = 0; k < r; k++)
						{
							work[k] += alloc[i][k];							
						}
						finish[i] = 1;
						count++;
						printf("P%d -> ",i);
						flag = 1;
					}
				}
			}
		}
		if(flag == 0)
			break;			
	}
	
	for(i=0; i < n; i++)
	{
		if(finish[i] == 1)
		{
			c1++;
		}
	}
	
	printf("%d", c1);
	
	if(c1 == n)
	{
		printf("\n The system is in safe state!!!\n\n");
		return 1;
	}
	else
	{
		printf("\n The system is in unsafe state since there is a deadlock!!!\n\n");
		return 0;
	}
}

void resourcerequest()
{
	int p, i;
	printf("Enter the process number requesting for resources :: ");
	scanf("%d", &p);

	printf("Enter the request :: ");
	for(i = 0; i < r; i++)
	{
		scanf("%d", &request[i]);
	}
	
	for(i = 0; i < r; i++)
	{
		if(request[i] > need[p][i])
		{
			printf("Request can't exceed Need!!!\n");	
			return;
		}
		if(request[i] > avail[i])
		{
			printf("Process %d should wait for Resources!!!\n",p);
			return;
		}
	}

	for(i = 0; i < r; i++)
	{
		avail[i] = avail[i] - request[i];
		alloc[p][i] = alloc[p][i] + request[i];
		need[p][i] = need[p][i] - request[i];
	}

	show();
	int x = safety();
	if(x)
		printf("The new system is safe!!! Request can be granted!!!\n");
	else
		printf("The new system is unsafe!!! Request can't be granted!!!\n");
}
main()
{
	int x;
	input();
	show();
	x = safety();
	if(x)	resourcerequest();
	else
	    printf("RESOURCE REQUEST CANT BE PERFORMED \n");
}
